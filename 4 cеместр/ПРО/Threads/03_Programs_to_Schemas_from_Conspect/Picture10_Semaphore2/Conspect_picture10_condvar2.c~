#include <pthread.h>
#include <stdio.h>
#include <unistd.h>

int m = 75;
int n = 100;

/* Оголошення сигнальних (умовних) змінних. */
pthread_cond_t sig1 = PTHREAD_COND_INITIALIZER;
pthread_cond_t sig2 = PTHREAD_COND_INITIALIZER;

/* Прапорці для запамятовування про надсилання сигналів sig1 та sig2. */
int flag1, flag2;

/* Функція ініціалізації сигнальних (умовних) змінних. */
void init_signal_variables()
{
  pthread_cond_init(&sig1,NULL);
  pthread_cond_init(&sig2,NULL);
}

/* Оголошення м'ютексів. */
pthread_mutex_t mut1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mut2 = PTHREAD_MUTEX_INITIALIZER;

/* Функція ініціалізації м'ютексів. */
void init_mutexes()
{
  pthread_mutex_init(&mut1,NULL);
  pthread_mutex_init(&mut2,NULL);
}

/* Потокова функція 1. */
void* thread_function1(void* unused)
{ = PTHREAD_MUTEX_INITIALIZER
 /* Встановлення дозволу відміняти цей потік у будь-який момент (асинхронно) */
  pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS,NULL);

  int i;
  /* Виведення на екран символу 'а' n разів. */
  printf("\n");
  for (i = 0; i < n; i++)
  {
    printf("a ");
  }
  printf("\n");
  
  printf("\nFunction 1 sends signal sig2 for the thread_function2\n");
  /* Функція 1 посилає сигнал sig2 для потоку thread_function2 */
  pthread_mutex_lock(&mut2);
  flag2 = 1;
  pthread_cond_signal(&sig2);
//  pthread_cond_broadcast(&sig2);
  pthread_mutex_unlock(&mut2);
  printf("\nSignal sig2 is sent!\n");

  printf("\nFunction 1 waits for receiving of the signal sig1\n");
  /* Функція 1 чекає на отримання сигналу sig1. */
  pthread_mutex_lock(&mut1);
  while (flag1 = 0)
      pthread_cond_wait(&sig1,&mut1);
  pthread_mutex_unlock(&mut1);

  /* Пригальмовуємо потік 1 для коректного виводу на екран */
  usleep(1);

  printf("\nthread_function1 works after receiving of the signal sig1\n");
  /* Виведення на екран символу 'b' n разів. */
  printf("\n");/* Встановлення дозволу відміняти цей потік у будь-який момент (асинхронно) */
    pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS,NULL);

  for (i = 0; i < n; i++)
  {
    printf("b ");
  }
  printf("\n");
  return NULL;
}


/* Потокова функція 2. */
void* thread_function2(void* unused)
{
 /* Встановлення дозволу відміняти цей потік у будь-який момент (асинхронно) */
  pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS,NULL);

  int i;
  /* Виведення на екран символу '1' n разів. */
  printf("\n");
  for (i = 0; i < n; i++)
  {
    printf("1 ");
  }
  printf("\n");
  
  printf("\nFunction 2 sends signal sig1 for the thread_function1\n");
  /* Функція 2 посилає сигнал sig1 для потоку thread_function1 */
  pthread_mutex_lock(&mut1);
  flag1 = 1;
  pthread_cond_signal(&sig1);
//  pthread_cond_broadcast(&sig1);
  pthread_mutex_unlock(&mut1);
  printf("\nSignal sig1 is sent!\n");

  printf("\nFunction 2 waits for receiving of the signal sig2\n");
  /* Функція 2 чекає на отримання сигналу sig2. */
  pthread_mutex_lock(&mut2);
  while (flag2 = 0)
      pthread_cond_wait(&sig2,&mut2);
  pthread_mutex_unlock(&mut2);

  printf("\nthread_function2 works after receiving of the signal sig2\n");
  /* Виведення на екран символу '2' n разів. */
  printf("\n");
  for (i = 0; i < n; i++)
  {
    printf("2 ");
  }
  printf("\n");
  return NULL;
}

int main()
{
  /* Оголошуються потокові змінні. */
  pthread_t thread1;
  pthread_t thread2;

  /*Ініціалізуються сигальні (умовні) змінні. */
  init_signal_variables();

  /* Ініціалізуються м'ютекси. */
  init_mutexes();

  /* Створюються потоки. */
  pthread_create (&thread1, NULL, &thread_function1, NULL);
  pthread_create (&thread2, NULL, &thread_function2, NULL);

  /* Очікується завершення потоків. */
  pthread_join (thread1, NULL);
  pthread_join (thread2, NULL);

  /*Завершення програми. */
  printf("\nProgram Finished !!!\n");
  return 0;
}
