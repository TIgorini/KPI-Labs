; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	G:\Laba2\Laba2\Laba2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?i@@3HA						; i
PUBLIC	?m@@3HA						; m
_BSS	SEGMENT
?i@@3HA	DD	01H DUP (?)				; i
?m@@3HA	DD	01H DUP (?)				; m
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\laba2\laba2\laba2.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv65 = -240						; size = 4
_A$ = -40						; size = 36
_main	PROC						; COMDAT

; 3    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 4    : 	int A[9];
; 5    : 	m = 0;

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, 0	; m

; 6    : 	i = 8;

  00028	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?i@@3HA, 8	; i
$LN4@main:

; 7    : 	do {
; 8    : 		m = 8 * i;

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  00037	c1 e0 03	 shl	 eax, 3
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, eax	; m

; 9    : 		switch (i) {

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  00044	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0004a	83 bd 10 ff ff
	ff 07		 cmp	 DWORD PTR tv65[ebp], 7
  00051	77 43		 ja	 SHORT $LN14@main
  00053	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00059	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN19@main[ecx*4]
$LN10@main:

; 10   : 		case 2: m += 4; break;

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m@@3HA	; m
  00065	83 c0 04	 add	 eax, 4
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, eax	; m
  0006d	eb 34		 jmp	 SHORT $LN5@main
$LN11@main:

; 11   : 		case 0: m = 17; break;

  0006f	c7 05 00 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?m@@3HA, 17	; m, 00000011H
  00079	eb 28		 jmp	 SHORT $LN5@main
$LN12@main:

; 12   : 		case 7: m -= 4; break;

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m@@3HA	; m
  00080	83 e8 04	 sub	 eax, 4
  00083	a3 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, eax	; m
  00088	eb 19		 jmp	 SHORT $LN5@main
$LN13@main:

; 13   : 		case 1: m = 4; break;

  0008a	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?m@@3HA, 4	; m
  00094	eb 0d		 jmp	 SHORT $LN5@main
$LN14@main:

; 14   : 		default: m++;

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m@@3HA	; m
  0009b	83 c0 01	 add	 eax, 1
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, eax	; m
$LN5@main:

; 15   : 		}
; 16   : 		A[i] = m;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m@@3HA	; m
  000ae	89 4c 85 d8	 mov	 DWORD PTR _A$[ebp+eax*4], ecx

; 17   : 		i--;

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000b7	83 e8 01	 sub	 eax, 1
  000ba	a3 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, eax	; i

; 18   : 	} while (i>-1);

  000bf	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?i@@3HA, -1	; i
  000c6	0f 8f 66 ff ff
	ff		 jg	 $LN4@main

; 19   : 	for (i = 0;i<9;i++)

  000cc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, 0	; i
  000d6	eb 0d		 jmp	 SHORT $LN9@main
$LN7@main:
  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000dd	83 c0 01	 add	 eax, 1
  000e0	a3 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, eax	; i
$LN9@main:
  000e5	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?i@@3HA, 9	; i
  000ec	7d 19		 jge	 SHORT $LN8@main

; 20   : 		printf("%d ", A[i]);

  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000f3	8b 4c 85 d8	 mov	 ecx, DWORD PTR _A$[ebp+eax*4]
  000f7	51		 push	 ecx
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
  000fd	e8 00 00 00 00	 call	 _printf
  00102	83 c4 08	 add	 esp, 8
  00105	eb d1		 jmp	 SHORT $LN7@main
$LN8@main:

; 21   : 	printf("\n");

  00107	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0010c	e8 00 00 00 00	 call	 _printf
  00111	83 c4 04	 add	 esp, 4

; 22   : 	return 0;

  00114	33 c0		 xor	 eax, eax

; 23   : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@main
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
  0013b	90		 npad	 1
$LN18@main:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN17@main
$LN17@main:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	24 00 00 00	 DD	 36			; 00000024H
  0014c	00 00 00 00	 DD	 $LN16@main
$LN16@main:
  00150	41		 DB	 65			; 00000041H
  00151	00		 DB	 0
  00152	66 90		 npad	 2
$LN19@main:
  00154	00 00 00 00	 DD	 $LN11@main
  00158	00 00 00 00	 DD	 $LN13@main
  0015c	00 00 00 00	 DD	 $LN10@main
  00160	00 00 00 00	 DD	 $LN14@main
  00164	00 00 00 00	 DD	 $LN14@main
  00168	00 00 00 00	 DD	 $LN14@main
  0016c	00 00 00 00	 DD	 $LN14@main
  00170	00 00 00 00	 DD	 $LN12@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b f4		 mov	 esi, esp
  00035	6a 01		 push	 1
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0003d	83 c4 04	 add	 esp, 4
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 __vfprintf_l
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

  00053	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 957  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	51		 push	 ecx
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	52		 push	 edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 640  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
